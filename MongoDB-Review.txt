MongoDB Server Programmer Zaman Now

Run MongoDB
mongod => untuk menyalakan server
mongo =>untuk menjalankan mongodb

Menggunakan show databases dan use namadatabase
Untuk menampilkan dan menggunaka database.
#database akan ditampilkan ketika collectionnya sudah dibuat
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> show databases
admin   0.000GB
config  0.000GB
local   0.000GB
> use belajar
switched to db belajar
> show databases
admin   0.000GB
config  0.000GB
local   0.000GB
> use tutorial
switched to db tutorial
> show databases
admin   0.000GB
config  0.000GB
local   0.000GB

db.getName(), db.dropDatabase(), db.hostInfo()
digunakan untuk menampilkan nama database, menghapus database, mengambil informasi host tempat mongodb
> use belajar
switched to db belajar
> db.getName()
belajar
> db.dropDatabase()
{ "ok" : 1 }
> db.getName()
belajar
> db.hostInfo()
{
        "system" : {
                "currentTime" : ISODate("2022-02-02T05:33:49.750Z"),
                "hostname" : "DESKTOP-P4K04E5",
                "cpuAddrSize" : 64,
                "memSizeMB" : NumberLong(12171),
                "memLimitMB" : NumberLong(12171),
                "numCores" : 4,
                "cpuArch" : "x86_64",
                "numaEnabled" : false
        },
        "os" : {
                "type" : "Windows",
                "name" : "Microsoft Windows 10",
                "version" : "10.0 (build 19044)"
        },
        "extra" : {
                "pageSize" : NumberLong(4096),
                "physicalCores" : 2
        },
        "ok" : 1
}


db.version, db.stats()
 digunakan untuk menampilkan versi database,  mengambil statistik penggunaan database
> db.version()
4.4.8
> db.stats()
{
        "db" : "belajar",
        "collections" : 0,
        "views" : 0,
        "objects" : 0,
        "avgObjSize" : 0,
        "dataSize" : 0,
        "storageSize" : 0,
        "totalSize" : 0,
        "indexes" : 0,
        "indexSize" : 0,
        "scaleFactor" : 1,
        "fileSize" : 0,
        "fsUsedSize" : 0,
        "fsTotalSize" : 0,
        "ok" : 1
}

Collection, tempat menyimpan document (table dalam sql)
Max document 16MB
Max Level nested document 100 level

Database Methods untuk colletion:
db.getCollectionNames(), db.createColleltion(name), db.getCollection(name), db.<name>, db.getCollectionInfos()
Digunakan untuk mengambil semua nama collection, membuat collection baru, mendapatkan object collection, sama dengan db.getCollection(<name>), Mendapat informasi semua collection
> use belajar
switched to db belajar
> db.createCollection("contoh")
{ "ok" : 1 }
> show databases;
admin    0.000GB
belajar  0.000GB
config   0.000GB
local    0.000GB
> show collections
contoh
> db.getCollectionNames()
[ "contoh" ]
> db.createCollection("produk")
{ "ok" : 1 }
> db.getCollectionNames()
[ "contoh", "produk" ]
> db.getCollectionInfos()
[
        {
                "name" : "contoh",
                "type" : "collection",
                "options" : {

                },
                "info" : {
                        "readOnly" : false,
                        "uuid" : UUID("9127ff2a-e5cb-4ea7-bc0b-d9fe5230b287")
                },
                "idIndex" : {
                        "v" : 2,
                        "key" : {
                                "_id" : 1
                        },
                        "name" : "_id_"
                }
        },
        {
                "name" : "produk",
                "type" : "collection",
                "options" : {

                },
                "info" : {
                        "readOnly" : false,
                        "uuid" : UUID("f50ef24e-62ed-46ea-a721-0882e56c5f1b")
                },
                "idIndex" : {
                        "v" : 2,
                        "key" : {
                                "_id" : 1
                        },
                        "name" : "_id_"
                }
        }
]
> db.getCollection("contoh")
belajar.contoh

Collection Methods
db.<collection>.find(), db.<collection>.count(), db.<collection>.drop(), db.<collection>.totalSize(), db.<collection>.stats()
digunakan untuk mengambil semua document, mengambil jumlah document, menghapus collection, mengambil ukuran collection, mengambil informasi statistik collection

> db.contoh.find()
> db.contoh.count()
0
> db.contoh.totalSize()
8192
> db.contoh.stats()
{
        "ns" : "belajar.contoh",
        "size" : 0,
        "count" : 0,
        "storageSize" : 4096,
        "freeStorageSize" : 0,
        "capped" : false,
        "wiredTiger" : {
                "metadata" : {
                        "formatVersion" : 1
                },
                "creationString" : "access_pattern_hint=none,allocation_size=4KB,app_metadata=(formatVersion=1),assert=(commit_timestamp=none,durable_timestamp=none,read_timestamp=none,write_timestamp=off),block_allocation=best,block_compressor=snappy,cache_resident=false,checksum=on,colgroups=,collator=,columns=,dictionary=0,encryption=(keyid=,name=),exclusive=false,extractor=,format=btree,huffman_key=,huffman_value=,ignore_in_memory_cache_size=false,immutable=false,import=(enabled=false,file_metadata=,repair=false),internal_item_max=0,internal_key_max=0,internal_key_truncate=true,internal_page_max=4KB,key_format=q,key_gap=10,leaf_item_max=0,leaf_key_max=0,leaf_page_max=32KB,leaf_value_max=64MB,log=(enabled=true),lsm=(auto_throttle=true,bloom=true,bloom_bit_count=16,bloom_config=,bloom_hash_count=8,bloom_oldest=false,chunk_count_limit=0,chunk_max=5GB,chunk_size=10MB,merge_custom=(prefix=,start_generation=0,suffix=),merge_max=15,merge_min=0),memory_page_image_max=0,memory_page_max=10m,os_cache_dirty_max=0,os_cache_max=0,prefix_compression=false,prefix_compression_min=4,readonly=false,source=,split_deepen_min_child=0,split_deepen_per_child=0,split_pct=90,tiered_object=false,tiered_storage=(auth_token=,bucket=,bucket_prefix=,local_retention=300,name=,object_target_size=10M),type=file,value_format=u,verbose=[],write_timestamp_usage=none",
                "type" : "file",
                "uri" : "statistics:table:collection-7--1586389756550281333",
                "LSM" : {
                        "bloom filter false positives" : 0,
                        "bloom filter hits" : 0,
                        "bloom filter misses" : 0,
                        "bloom filter pages evicted from cache" : 0,
                        "bloom filter pages read into cache" : 0,
                        "bloom filters in the LSM tree" : 0,
                        "chunks in the LSM tree" : 0,
                        "highest merge generation in the LSM tree" : 0,
                        "queries that could have benefited from a Bloom filter that did not exist" : 0,
                        "sleep for LSM checkpoint throttle" : 0,
                        "sleep for LSM merge throttle" : 0,
                        "total size of bloom filters" : 0
                },
                "block-manager" : {
                        "allocations requiring file extension" : 0,
                        "blocks allocated" : 0,
                        "blocks freed" : 0,
                        "checkpoint size" : 0,
                        "file allocation unit size" : 4096,
                        "file bytes available for reuse" : 0,
                        "file magic number" : 120897,
                        "file major version number" : 1,
                        "file size in bytes" : 4096,
                        "minor version number" : 0
                },
                "btree" : {
                        "btree checkpoint generation" : 29,
                        "btree clean tree checkpoint expiration time" : NumberLong("9223372036854775807"),
                        "column-store fixed-size leaf pages" : 0,
                        "column-store internal pages" : 0,
                        "column-store variable-size RLE encoded values" : 0,
                        "column-store variable-size deleted values" : 0,
                        "column-store variable-size leaf pages" : 0,
                        "fixed-record size" : 0,
                        "maximum internal page key size" : 368,
                        "maximum internal page size" : 4096,
                        "maximum leaf page key size" : 2867,
                        "maximum leaf page size" : 32768,
                        "maximum leaf page value size" : 67108864,
                        "maximum tree depth" : 0,
                        "number of key/value pairs" : 0,
                        "overflow pages" : 0,
                        "pages rewritten by compaction" : 0,
                        "row-store empty values" : 0,
                        "row-store internal pages" : 0,
                        "row-store leaf pages" : 0
                },
                "cache" : {
                        "bytes currently in the cache" : 182,
                        "bytes dirty in the cache cumulative" : 0,
                        "bytes read into cache" : 0,
                        "bytes written from cache" : 0,
                        "checkpoint blocked page eviction" : 0,
                        "checkpoint of history store file blocked non-history store page eviction" : 0,
                        "data source pages selected for eviction unable to be evicted" : 0,
                        "eviction walk passes of a file" : 0,
                        "eviction walk target pages histogram - 0-9" : 0,
                        "eviction walk target pages histogram - 10-31" : 0,
                        "eviction walk target pages histogram - 128 and higher" : 0,
                        "eviction walk target pages histogram - 32-63" : 0,
                        "eviction walk target pages histogram - 64-128" : 0,
                        "eviction walk target pages reduced due to history store cache pressure" : 0,
                        "eviction walks abandoned" : 0,
                        "eviction walks gave up because they restarted their walk twice" : 0,
                        "eviction walks gave up because they saw too many pages and found no candidates" : 0,
                        "eviction walks gave up because they saw too many pages and found too few candidates" : 0,
                        "eviction walks reached end of tree" : 0,
                        "eviction walks restarted" : 0,
                        "eviction walks started from root of tree" : 0,
                        "eviction walks started from saved location in tree" : 0,
                        "hazard pointer blocked page eviction" : 0,
                        "history store table insert calls" : 0,
                        "history store table insert calls that returned restart" : 0,
                        "history store table out-of-order resolved updates that lose their durable timestamp" : 0,
                        "history store table out-of-order updates that were fixed up by reinserting with the fixed timestamp" : 0,
                        "history store table reads" : 0,
                        "history store table reads missed" : 0,
                        "history store table reads requiring squashed modifies" : 0,
                        "history store table truncation by rollback to stable to remove an unstable update" : 0,
                        "history store table truncation by rollback to stable to remove an update" : 0,
                        "history store table truncation to remove an update" : 0,
                        "history store table truncation to remove range of updates due to key being removed from the data page during reconciliation" : 0,
                        "history store table truncation to remove range of updates due to out-of-order timestamp update on data page" : 0,
                        "history store table writes requiring squashed modifies" : 0,
                        "in-memory page passed criteria to be split" : 0,
                        "in-memory page splits" : 0,
                        "internal pages evicted" : 0,
                        "internal pages split during eviction" : 0,
                        "leaf pages split during eviction" : 0,
                        "modified pages evicted" : 0,
                        "overflow pages read into cache" : 0,
                        "page split during eviction deepened the tree" : 0,
                        "page written requiring history store records" : 0,
                        "pages read into cache" : 0,
                        "pages read into cache after truncate" : 0,
                        "pages read into cache after truncate in prepare state" : 0,
                        "pages requested from the cache" : 0,
                        "pages seen by eviction walk" : 0,
                        "pages written from cache" : 0,
                        "pages written requiring in-memory restoration" : 0,
                        "tracked dirty bytes in the cache" : 0,
                        "unmodified pages evicted" : 0
                },
                "cache_walk" : {
                        "Average difference between current eviction generation when the page was last considered" : 0,
                        "Average on-disk page image size seen" : 0,
                        "Average time in cache for pages that have been visited by the eviction server" : 0,
                        "Average time in cache for pages that have not been visited by the eviction server" : 0,
                        "Clean pages currently in cache" : 0,
                        "Current eviction generation" : 0,
                        "Dirty pages currently in cache" : 0,
                        "Entries in the root page" : 0,
                        "Internal pages currently in cache" : 0,
                        "Leaf pages currently in cache" : 0,
                        "Maximum difference between current eviction generation when the page was last considered" : 0,
                        "Maximum page size seen" : 0,
                        "Minimum on-disk page image size seen" : 0,
                        "Number of pages never visited by eviction server" : 0,
                        "On-disk page image sizes smaller than a single allocation unit" : 0,
                        "Pages created in memory and never written" : 0,
                        "Pages currently queued for eviction" : 0,
                        "Pages that could not be queued for eviction" : 0,
                        "Refs skipped during cache traversal" : 0,
                        "Size of the root page" : 0,
                        "Total number of pages currently in cache" : 0
                },
                "checkpoint-cleanup" : {
                        "pages added for eviction" : 0,
                        "pages removed" : 0,
                        "pages skipped during tree walk" : 0,
                        "pages visited" : 0
                },
                "compression" : {
                        "compressed page maximum internal page size prior to compression" : 4096,
                        "compressed page maximum leaf page size prior to compression " : 131072,
                        "compressed pages read" : 0,
                        "compressed pages written" : 0,
                        "page written failed to compress" : 0,
                        "page written was too small to compress" : 0
                },
                "cursor" : {
                        "Total number of entries skipped by cursor next calls" : 0,
                        "Total number of entries skipped by cursor prev calls" : 0,
                        "Total number of entries skipped to position the history store cursor" : 0,
                        "Total number of pages skipped without reading by cursor next calls" : 0,
                        "Total number of pages skipped without reading by cursor prev calls" : 0,
                        "Total number of times a search near has exited due to prefix config" : 0,
                        "bulk loaded cursor insert calls" : 0,
                        "cache cursors reuse count" : 0,
                        "close calls that result in cache" : 2,
                        "create calls" : 2,
                        "cursor next calls that skip due to a globally visible history store tombstone" : 0,
                        "cursor next calls that skip greater than or equal to 100 entries" : 0,
                        "cursor next calls that skip less than 100 entries" : 2,
                        "cursor prev calls that skip due to a globally visible history store tombstone" : 0,
                        "cursor prev calls that skip greater than or equal to 100 entries" : 0,
                        "cursor prev calls that skip less than 100 entries" : 0,
                        "insert calls" : 0,
                        "insert key and value bytes" : 0,
                        "modify" : 0,
                        "modify key and value bytes affected" : 0,
                        "modify value bytes modified" : 0,
                        "next calls" : 2,
                        "open cursor count" : 0,
                        "operation restarted" : 0,
                        "prev calls" : 0,
                        "remove calls" : 0,
                        "remove key bytes removed" : 0,
                        "reserve calls" : 0,
                        "reset calls" : 4,
                        "search calls" : 0,
                        "search history store calls" : 0,
                        "search near calls" : 0,
                        "truncate calls" : 0,
                        "update calls" : 0,
                        "update key and value bytes" : 0,
                        "update value size change" : 0
                },
                "reconciliation" : {
                        "approximate byte size of timestamps in pages written" : 0,
                        "approximate byte size of transaction IDs in pages written" : 0,
                        "dictionary matches" : 0,
                        "fast-path pages deleted" : 0,
                        "internal page key bytes discarded using suffix compression" : 0,
                        "internal page multi-block writes" : 0,
                        "internal-page overflow keys" : 0,
                        "leaf page key bytes discarded using prefix compression" : 0,
                        "leaf page multi-block writes" : 0,
                        "leaf-page overflow keys" : 0,
                        "maximum blocks required for a page" : 0,
                        "overflow values written" : 0,
                        "page checksum matches" : 0,
                        "page reconciliation calls" : 0,
                        "page reconciliation calls for eviction" : 0,
                        "pages deleted" : 0,
                        "pages written including an aggregated newest start durable timestamp " : 0,
                        "pages written including an aggregated newest stop durable timestamp " : 0,
                        "pages written including an aggregated newest stop timestamp " : 0,
                        "pages written including an aggregated newest stop transaction ID" : 0,
                        "pages written including an aggregated newest transaction ID " : 0,
                        "pages written including an aggregated oldest start timestamp " : 0,
                        "pages written including an aggregated prepare" : 0,
                        "pages written including at least one prepare" : 0,
                        "pages written including at least one start durable timestamp" : 0,
                        "pages written including at least one start timestamp" : 0,
                        "pages written including at least one start transaction ID" : 0,
                        "pages written including at least one stop durable timestamp" : 0,
                        "pages written including at least one stop timestamp" : 0,
                        "pages written including at least one stop transaction ID" : 0,
                        "records written including a prepare" : 0,
                        "records written including a start durable timestamp" : 0,
                        "records written including a start timestamp" : 0,
                        "records written including a start transaction ID" : 0,
                        "records written including a stop durable timestamp" : 0,
                        "records written including a stop timestamp" : 0,
                        "records written including a stop transaction ID" : 0
                },
                "session" : {
                        "object compaction" : 0,
                        "tiered operations dequeued and processed" : 0,
                        "tiered operations scheduled" : 0,
                        "tiered storage local retention time (secs)" : 0,
                        "tiered storage object size" : 0
                },
                "transaction" : {
                        "race to read prepared update retry" : 0,
                        "rollback to stable history store records with stop timestamps older than newer records" : 0,
                        "rollback to stable inconsistent checkpoint" : 0,
                        "rollback to stable keys removed" : 0,
                        "rollback to stable keys restored" : 0,
                        "rollback to stable restored tombstones from history store" : 0,
                        "rollback to stable restored updates from history store" : 0,
                        "rollback to stable sweeping history store keys" : 0,
                        "rollback to stable updates removed from history store" : 0,
                        "transaction checkpoints due to obsolete pages" : 0,
                        "update conflicts" : 0
                }
        },
        "nindexes" : 1,
        "indexBuilds" : [ ],
        "totalIndexSize" : 4096,
        "totalSize" : 8192,
        "indexSizes" : {
                "_id_" : 4096
        },
        "scaleFactor" : 1,
        "ok" : 1
}
> db.contoh.drop()
true
> db.getCollectionNames()
[ "produk" ]
> db.produk.drop()
true
> db.getCollectionNames()
[ ]


Insert Document Function
db.<collection>.insertOne(document) Menambah dokumen ke collection
db.<collection>.insertMany(array<document>) Menambah semua document di array ke collection
db.<collection>.insert(document/array) Menambah satu document atau banyak document

> use ecommerce
switched to db ecommerce
> db.createCollection('customers');
{ "ok" : 1 }
> db.createCollection('products');
{ "ok" : 1 }
> db.createCollection('orders');
{ "ok" : 1 }
> db.getCollectionNames()
[ "customers", "orders", "products" ]
> db.customers.insertOne({
...     _id: "khannedy",
...     name: "Eko Kurniawan Khannedy"
... });
{ "acknowledged" : true, "insertedId" : "khannedy" }
> db.customers.find()
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.products.insertMany([
...     {
...         _id: 1,
...         name: "Indomie Ayam Bawang",
...         price: new NumberLong(2000)
...     },
...     {
...         _id: 2,
...         name: "Mie Sedap",
...         price: new NumberLong(2000)
...     }
... ]);
{ "acknowledged" : true, "insertedIds" : [ 1, 2 ] }
> db.products.find()
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.orders.insertOne({
...     _id: new ObjectId(),
...     total: new NumberLong(8000),
...     items: [
...         {
...             product_id: 1,
...             price: new NumberLong(2000),
...             quantity: new NumberInt(2)
...         },
...         {
...             product_id: 2,
...             price: new NumberLong(2000),
...             quantity: new NumberInt(2)
...         }
...     ]
... })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("61fa4fe355b970bfab534a4d")
}
> db.orders.find()
{ "_id" : ObjectId("61fa4fe355b970bfab534a4d"), "total" : NumberLong(8000), "items" : [ { "product_id" : 1, "price" : NumberLong(2000), "quantity" : 2 }, { "product_id" : 2, "price" : NumberLong(2000), "quantity" : 2 } ] }


Query Document MongoDB

db.<collection>.find(query)
> db.customers.find({
...     _id: "khannedy"
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.customers.find({
...     name: "Eko Kurniawan Khannedy"
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.customers.find({
...     _id: "khannedy",
...     name: "Eko Kurniawan Khannedy"
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.products.find({
...     price: 2000
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.orders.find({
...     "items.product_id": 1
... });
{ "_id" : ObjectId("61fa4fe355b970bfab534a4d"), "total" : NumberLong(8000), "items" : [ { "product_id" : 1, "price" : NumberLong(2000), "quantity" : 2 }, { "product_id" : 2, "price" : NumberLong(2000), "quantity" : 2 } ] }


Query Comparison
> db.customers.find({
...     _id: {
...         $eq: "khannedy"
...     }
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.products.find({
...     price: {
...         $gt: 1000
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.find()
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.insertMany([
...     {
...         _id: 3,
...         name: "Pop Mie Rasa Bakso",
...         price: new NumberLong(2500),
...         category: "food"
...     },
...     {
...         _id: 4,
...         name: "Samsung Galaxy S9+",
...         price: new NumberLong(10000000),
...         category: "handphone"
...     },
...     {
...         _id: 5,
...         name: "Acer Precator XXI",
...         price: new NumberLong(25000000),
...         category: "laptop"
...     }
... ]);
{ "acknowledged" : true, "insertedIds" : [ 3, 4, 5 ] }
> db.products.find()
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     category: {
...         $in: ["handphone", "laptop"]
...     },
...     price: {
...         $gt: 5000000
...     }
... });
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }

Logical Query Operator
> db.products.find({
...     $and: [
...         {
...             category: {
...                 $in: ["laptop", "handphone"]
...             }
...         },
...         {
...             price: {
...                 $gt: 20000000
...             }
...         }
...     ]
... });
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     category: {
...         $not: {
...             $in: ["laptop", "handphone"]
...         }
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
> db.products.find({
...     $and: [
...         {
...             price: {
...                 $gte: 10000000,
...                 $lte: 20000000
...             }
...         },
...         {
...             category: {
...                 $ne: 'food'
...             }
...         }
...     ]
... });
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
>

Element Query Operator
$exist, $type

> db.products.find({
...     category: {
...         $exists: false
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.find({
...     category: {
...         $type: "string"
...     }
... });
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     category: {
...         $type: ["string", "long"]
...     }
... });
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     price: {
...         $type: ["int", "long"]
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }


Evaluation Query Operator
> db.products.find({
...     $expr: {
...         $gt: ["$price", 1000000]
...     }
... });
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.customers.find({
...     $expr: {
...         $eq: [
...             { $toUpper: "$_id" },
...             "KHANNEDY"
...         ]
...     }
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
>
> db.products.find({
...     $jsonSchema: {
...         required: [ "name", "category"]
...     }
... });
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     $jsonSchema: {
...         required: [ "name"],
...         properties: {
...             name: {
...                 bsonType: "string"
...             },
...             price: {
...                 bsonType: "long"
...             }
...         }
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     price: {
...         $mod: [5, 0]
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     name: {
...         $regex: /mie/,
...         $options: "i"
...     }
... });
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
> db.products.find({
...     name: {
...         $regex: /^Mie/
...     }
... });
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.createIndex({
...     name: "text"
... });
{
        "createdCollectionAutomatically" : false,
        "numIndexesBefore" : 1,
        "numIndexesAfter" : 2,
        "ok" : 1
}
> db.products.find({
...     $text: {
...         $search: '"mie sedap"'
...     }
... });
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.find()
{ "_id" : 1, "name" : "Indomie Ayam Bawang", "price" : NumberLong(2000) }
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
{ "_id" : 4, "name" : "Samsung Galaxy S9+", "price" : NumberLong(10000000), "category" : "handphone" }
{ "_id" : 5, "name" : "Acer Precator XXI", "price" : NumberLong(25000000), "category" : "laptop" }
> db.products.find({
...     $text: {
...         $search: '"mie sedap"'
...     }
... });
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
> db.products.find({
...     $text: {
...         $search: "mie sedap"
...     }
... });
{ "_id" : 2, "name" : "Mie Sedap", "price" : NumberLong(2000) }
{ "_id" : 3, "name" : "Pop Mie Rasa Bakso", "price" : NumberLong(2500), "category" : "food" }
> db.customers.find({
...     $where: function(){
...         return this.name = "Eko Kurniawan Khannedy"
...         // return this._id == "khannedy";
...     }
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }
> db.customers.find({
...     $where: function(){
...         // return this.name = "Eko Kurniawan Khannedy"
...         return this._id == "khannedy";
...     }
... });
{ "_id" : "khannedy", "name" : "Eko Kurniawan Khannedy" }

Array Query Operator

